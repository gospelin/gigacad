name: Python package

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Add permissions for the workflow
permissions:
  contents: write  # Required for actions/upload-artifact to upload artifacts
  metadata: read
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    env:
      FLASK_ENV: testing
      SECRET_KEY: test-secret-key
      DB_NAME: ":memory:"
      LOG_DIR: ./logs

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: First interaction
        uses: actions/first-interaction@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-message: "Thank you for opening your first issue! ðŸŽ‰"
          pr-message: "Thank you for opening your first pull request! ðŸŽ‰"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Filter requirements.txt for CI/CD
        run: |
          # Create a temporary requirements file excluding commented lines
          grep -vE '^\s*#' requirements.txt > requirements-ci.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest pytest-mock
          if [ -f requirements-ci.txt ]; then pip install -r requirements-ci.txt; fi

      - name: Create log directory
        run: |
          mkdir -p ${{ env.LOG_DIR }}

      - name: Lint with flake8
        run: |
          # Check for critical syntax errors and undefined names only
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          # Full linting with warnings, but don't fail the build
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest --junitxml=pytest-report.xml --verbose
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@3.2.0  # Updated to the correct v3 release
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-report.xml
            ${{ env.LOG_DIR }}/*.log

      - name: Check test failure
        if: failure()
        run: |
          echo "Tests failed for Python ${{ matrix.python-version }}. Check the test results artifact for details."
          exit 1